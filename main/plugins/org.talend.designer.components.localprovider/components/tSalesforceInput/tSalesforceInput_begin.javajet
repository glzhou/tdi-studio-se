<%@ jet
imports="
        java.util.List

        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.utils.TalendTextUtils
		"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	log = new LogUtil(node);
	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
   	boolean bIsManualQuery = ("true").equals(ElementParameterParser.getValue(node, "__MANUAL_QUERY__"));

    boolean useHttpChunked = "true".equals(ElementParameterParser.getValue(node,"__USE_HTTP_CHUNKED__"));

   	String limit = ElementParameterParser.getValue(node,"__LIMIT__");

   	String passwordFieldName = "";
	%>

int nb_line_<%=cid%> = 0;
int limit_<%=cid %> = <%=limit %>;
System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);

	if (metadata != null) {

		List<IMetadataColumn> columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		// if output columns are defined
		if (nbSchemaColumns > 0 && outgoingConns != null && outgoingConns.size() > 0){
			boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			String api = ElementParameterParser.getValue(node,"__API__");

			String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			String username = ElementParameterParser.getValue(node, "__USER__");

			boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));

			String modulename = ElementParameterParser.getValue(node, "__MODULENAME__").trim();
			String customModulename = ElementParameterParser.getValue(node, "__CUSTOM_MODULE__").trim();
			String sObject = (("CustomModule").equals(modulename)) ? customModulename : "\""+modulename+"\"";

			//for bulk query
		   	String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
		   	boolean needTraceMessage = ("true").equals(ElementParameterParser.getValue(node,"__HTTP_TRACEMESSAGE__"));

		   	//for soap query
		   	String batchSize = ElementParameterParser.getValue(node,"__BATCH_SIZE__");
			String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
			String normalize_delimiter = ElementParameterParser.getValue(node, "__NORMALIZE_DELIMITER__");
			String columnname_delimiter = ElementParameterParser.getValue(node, "__COLUMNNAME_DELIMITER__");
			boolean queryAll = ("true").equals(ElementParameterParser.getValue(node,"__QUERY_ALL__"));
			String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");
			boolean isUseSaveSession = "true".equals(ElementParameterParser.getValue(node,"__USE_SAVE_SESSION__"));
			String sessionDir = ElementParameterParser.getValue(node,"__SESSION_DIRECTORY__");

			boolean bulkConnection = ("bulk").equals(ElementParameterParser.getValue(node,"__API__"));

			String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
			boolean useOAuth = "OAUTH".equals(loginType);

			boolean hasDynamic = false;
			StringBuilder unDynamicCols = new StringBuilder();
			String dynamicColName = "";
			for(int i=0; columnList!=null && i< columnList.size(); i++) {
		        if(columnList.get(i).getTalendType().equals("id_Dynamic")){
		            hasDynamic = true;
		            dynamicColName = columnList.get(i).getLabel();
		        }else{
		        	unDynamicCols.append(columnList.get(i).getLabel());
		        	unDynamicCols.append(",");
		        }
			}
			if(unDynamicCols.lastIndexOf(",")>-1){
				unDynamicCols.deleteCharAt(unDynamicCols.lastIndexOf(","));
			}
			if("soap".equals(api)){
				if(hasDynamic){
				%>
					boolean isFirstCheckDyn_<%=cid %> = true;
					routines.system.Dynamic dynamic_<%=cid%> = new routines.system.Dynamic();
					java.util.List<String> unDynamicCols_<%=cid%>=java.util.Arrays.asList("<%=unDynamicCols%>".split(","));
				<%
				}
			%>
				org.talend.salesforce.SforceConnection sforceConn_<%=cid%> = null;
				<%if(useExistingConn){%>
					if(globalMap.get("conn_<%=connection%>") == null){
						throw new RuntimeException("Get null connection from <%=connection%>");
					}
					<%log.info(log.str("Use exist connection : " + connection + "."));%>
					sforceConn_<%=cid%> = (org.talend.salesforce.SforceConnection)globalMap.get("conn_<%=connection%>");
				<%
				}else{
					if(useOAuth){
						String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
                		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
                		%>
                		<%
                    	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
                    	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                    	%>
                    		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    	<%
                    	} else {
                    	%>
                    		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                    	<%
                    	}
                    	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");

                		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
                		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
						%>
						sforceConn_<%=cid%> =
							new org.talend.salesforce.SforceOAuthConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
                				<%
                				if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
                				%>
                    				.setTokenFilePath(<%=tokenFile%>)
                				<%
                				}
                				%>
                				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                            	<%
                            	if(clientID != null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                            	%>
                            		.setClientID(<%=clientID%>)
                            	<%
                            	}
                            	%>
                                .useHttpChunked(<%= useHttpChunked %>)
                            	.build();
					<%
					}else{
						if(useProxy){
							passwordFieldName = "__PROXY_PASSWORD__";
            				if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                    		%>
                    			String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    		<%
                    		} else {
                    		%>
                    			String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                    		<%
                    		}
							%>
						    java.util.Properties props_<%=cid%> = System.getProperties();
						    props_<%=cid%>.put("socksProxyHost",<%=proxyHost%>);
						    props_<%=cid%>.put("socksProxyPort",<%=proxyPort%>);
						    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername%>);
						    props_<%=cid%>.put("java.net.socks.password", decryptedPwd_<%=cid%>);
						<%
						}
						%>
						<%
            			passwordFieldName = "__PASS__";
            			%>

        				<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
						sforceConn_<%=cid%> =
                			new org.talend.salesforce.SforceBasicConnection.Builder(<%=endpoint%>, <%=username%>, decryptedPassword_<%=cid%>)
                				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                            	<%
				            	if(isUseSaveSession){
								%>
									.setSessionFilePath(<%=sessionDir%>)
								<%
								}
                            	if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                            	%>
                            		.setClientID(<%=clientID%>)
                            	<%
                            	}
                            	%>
                                .useHttpChunked(<%= useHttpChunked %>)
                            	.build();
					<%
					}
					log.info(log.str("Login successful."));
				}
				%>
				org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl(sforceConn_<%=cid%>);

				<%
				if(hasDynamic){
				%>
					java.util.List<String> dynamicColsName_<%=cid%> = new java.util.ArrayList<String>();
					class SFDynamicUtil_<%=cid%>{
						public void genDynamicColumn(org.talend.salesforce.SforceManagement sfMgr, routines.system.Dynamic dynamic, java.util.List<String> dynamicColsName, java.util.List<String> unDynamicCols <%if(bIsManualQuery){%>,org.talend.salesforce.TopQueryResult topqr<%}%>){
							<%
							if(bIsManualQuery){
							%>
							java.util.List columnNameList = topqr.getReturnColumns();
							java.util.List columnLocalNameList = topqr.getReturnLocalColumns();
							<%
					        }
					        %>
							try {
					            com.salesforce.soap.partner.DescribeSObjectResult objInfo = sfMgr.describeSObject(<%=sObject%>);
					            com.salesforce.soap.partner.Field[] fields = objInfo.getFields();
					            for (com.salesforce.soap.partner.Field field:fields) {
					            	<%
									if(bIsManualQuery){
									%>
					            	if(!columnNameList.contains(field.getName()) && !columnLocalNameList.contains(field.getName())){
					            		continue;
					            	}
					            	<%
					            	}
					            	%>
									if(!unDynamicCols.contains(field.getName())){
										String sfType = field.getType().toString();
										String talendType = "String";
								        if (sfType.equals("boolean")) {
								            talendType = "Boolean";
								        } else if (sfType.equals("int")) {
								            talendType = "Integer";
								        } else if (sfType.equals("date") || sfType.equals("time") || sfType.equals("datetime")) {
								            talendType = "Date";
								        } else if (sfType.equals("double") || sfType.equals("currency")) {
								            talendType = "Double";
								        } else {
								            talendType = "String";
								        }
								    	routines.system.DynamicMetadata dynamicMetadata = new routines.system.DynamicMetadata();
								    	dynamicColsName.add(field.getName());
								    	dynamicMetadata.setName(field.getName());
								    	dynamicMetadata.setDbName(dynamicMetadata.getName());
								    	dynamicMetadata.setType("id_" + talendType);
								    	if (sfType.equals("date")) {
								            dynamicMetadata.setFormat("yyyy-MM-dd");
								        } else if (sfType.equals("time")) {
								            dynamicMetadata.setFormat("HH:mm:ss.SSS'Z'");
								        } else if (sfType.equals("datetime")) {
								            dynamicMetadata.setFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
								        } else {
								            dynamicMetadata.setFormat(null);
								        }
								        if ("String".equals(talendType)) {
								            dynamicMetadata.setLength(field.getLength());
								            dynamicMetadata.setPrecision(field.getPrecision());
								        } else {
								            dynamicMetadata.setLength(field.getPrecision());
								            dynamicMetadata.setPrecision(field.getScale());
								        }
								    	dynamicMetadata.setDbType("VARCHAR");
								    	dynamicMetadata.setNullable(field.getNillable());
								    	dynamicMetadata.setKey(false);
								    	if(field.getReferenceTo()!=null && field.getReferenceTo().length > 0){
								    		dynamicMetadata.setRefFieldName(field.getRelationshipName());
								    		dynamicMetadata.setRefModuleName(field.getReferenceTo()[0]);
								    	}
								    	dynamicMetadata.setSourceType(routines.system.DynamicMetadata.sourceTypes.salesforce);
								    	//dynamicMetadata.setColumnPosition(i);
								    	dynamic.metadatas.add(dynamicMetadata);
								    }
							    }
					        } catch (Exception e) {
					            e.printStackTrace();
					        }
						}
					}
					SFDynamicUtil_<%=cid%> sfDynamicUtil_<%=cid%> =new SFDynamicUtil_<%=cid%>();
				<%
				}
				%>
			<%
			}else{
			%>
				org.talend.salesforceBulk.SforceBulkConnection sforceConn_<%=cid%> = null;
				<%
				if(useExistingConn){
				%>
					if(globalMap.get("conn_<%=connection%>")==null){
						throw new RuntimeException("Get null connection from <%=connection %>");
					}
					sforceConn_<%=cid%> = (org.talend.salesforceBulk.SforceBulkConnection)globalMap.get("conn_<%=connection %>");
					<%log.info(log.str("Use exist connection : " + connection + "."));%>
				<%
				}else{
					if(useOAuth){
						String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
                		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
                    	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
                    	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                    	%>
                    		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    	<%
                    	} else {
                    	%>
                    		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                    	<%
                    	}
                    	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
                		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
                		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
						%>
						sforceConn_<%=cid%>
                    		= new org.talend.salesforceBulk.SforceOAuthBulkConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
                    			<%
                    			if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
                    			%>
                    				.setTokenFilePath(<%=tokenFile%>)
                    			<%
                    			}
                    			%>
                    			.needCompression(<%=needCompression%>).needTraceMessage(<%=needTraceMessage%>)
                    			.build();
					<%
					}else{
            			passwordFieldName = "__PASS__";
            			%>

						<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

						<%
        				if(useProxy){
                			passwordFieldName = "__PROXY_PASSWORD__";

                			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                    		%>
                    			String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                    		<%
                    		} else {
                    		%>
                    			String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                    		<%
                    		}
                			%>
                		<%
                		}
        				%>

						sforceConn_<%=cid%>
                			= new org.talend.salesforceBulk.SforceBasicBulkConnection.Builder(<%=endpoint%>,<%=username%>,decryptedPassword_<%=cid%>,<%=apiVersion%>)
                				.needCompression(<%=needCompression%>).needTraceMessage(<%=needTraceMessage%>)
                				<%
                				if(useProxy){
                       			%>
                        			.setProxy(true,<%=proxyHost%>,<%=TalendTextUtils.removeQuotes(proxyPort)%>,<%=proxyUsername%>,decryptedPwd_<%=cid%>)
                        		<%
                        		}
                				%>
                				.build();
					<%
					}
					log.info(log.str("Login successful."));
				}
				%>
				org.talend.salesforceBulk.SalesforceBulkAPI	sforceBulk_<%=cid%> = new org.talend.salesforceBulk.SalesforceBulkAPI(sforceConn_<%=cid%>);
			<%
			}

			String sql = "";
			String condition = null;

			if (bIsManualQuery){

				sql = ElementParameterParser.getValue(node, "__QUERY__");
				sql = sql.replaceAll("\n", " ").replaceAll("\r", " ");
				%>
				StringBuilder sql_<%=cid%> = new StringBuilder(<%=sql%>);
				<%
			} else{

				condition = ElementParameterParser.getValue(node, "__CONDITION__").trim();
				if(hasDynamic){
				%>
					sfDynamicUtil_<%=cid%>.genDynamicColumn(sfMgr_<%=cid%>, dynamic_<%=cid%>, dynamicColsName_<%=cid%>,unDynamicCols_<%=cid%>);
				<%
				}
				%>
				StringBuilder sql_<%=cid%> = new StringBuilder("select ");
				sql_<%=cid%>.append("<%=unDynamicCols%>");
				<%
				if(hasDynamic){
				%>
					if(dynamicColsName_<%=cid%>.size()>0){
						sql_<%=cid%>.append("<%=unDynamicCols.length()>0?",":""%>"+routines.system.StringUtils.list(dynamicColsName_<%=cid%>.toArray(new String[0]),","));
					}
				<%
				}
				%>
				sql_<%=cid%>.append(" from ");
				sql_<%=cid%>.append(<%=sObject%>);
				<%
			}

			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // start 1
			%>

				<%
				if(!("".equals(condition))) {
				%>
					String condition_<%=cid%> = <%=condition %>;
					if (condition_<%=cid%> != null && !("".equals(condition_<%=cid%>))){
						sql_<%=cid%>.append(" where ").append(condition_<%=cid%>);
					}
				<%
				}
				%>
				<%log.debug(log.str("SOQL is: "), log.var("sql"), log.str("."));%>
				<%
				log.info(log.str("Retrieving records from the datasource."));
				if("soap".equals(api)){%>
					com.salesforce.soap.partner.QueryResult qr_<%=cid %> = null;
					<%
					if(queryAll){
					%>
						qr_<%=cid %> = sfMgr_<%=cid%>.queryAll(sql_<%=cid%>.toString(),new Integer(<%=batchSize%>));
					<%
					}else{
					%>
						qr_<%=cid %> = sfMgr_<%=cid%>.query(sql_<%=cid%>.toString(),new Integer(<%=batchSize%>));
					<%
					}
					%>

					org.talend.salesforce.TopConfig.VALUE_DELIMITER = <%=normalize_delimiter %>;
					org.talend.salesforce.TopConfig.COLUMNNAME_DELIMTER = <%=columnname_delimiter %>;

	    			org.talend.salesforce.TopQueryResult topqr_<%=cid %> = null;
	    			topqr_<%=cid %> = new org.talend.salesforce.TopQueryResult();
	    			topqr_<%=cid %>.processTopQueryResult(qr_<%=cid %>);

					boolean bContinue_<%=cid %> = true;
					<%
					if(hasDynamic && bIsManualQuery){
					%>
						sfDynamicUtil_<%=cid%>.genDynamicColumn(sfMgr_<%=cid%>, dynamic_<%=cid%>, dynamicColsName_<%=cid%>, unDynamicCols_<%=cid%> ,topqr_<%=cid %>);
					<%
					}
					%>

					while (bContinue_<%=cid %> && qr_<%=cid %> != null && qr_<%=cid %>.getRecords() != null) {

						java.util.List<org.talend.salesforce.TopRecord> allTopRecords_<%=cid %> = topqr_<%=cid %>.getAllTopRecords();
					    // process the query results
					    for (int i_<%=cid %> = 0; i_<%=cid %> < allTopRecords_<%=cid %>.size(); i_<%=cid %>++) {

							org.talend.salesforce.TopRecord topRecord_<%=cid%> = allTopRecords_<%=cid%>.get(i_<%=cid%>);
							<%
						    if(hasDynamic){
						    %>
						    	dynamic_<%=cid %>.clearColumnValues();
						    	for(int j_<%=cid%> = 0; j_<%=cid%> < dynamic_<%=cid %>.getColumnCount(); j_<%=cid%>++){
									Object valueObj_<%=cid%> = topRecord_<%=cid%>.getValue(dynamicColsName_<%=cid%>.get(j_<%=cid%>));
									routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = dynamic_<%=cid %>.getColumnMetadata(j_<%=cid%>);
									if(valueObj_<%=cid%> !=null){
										if("id_Date".equals(dynamicMetadata_<%=cid%>.getType())){
											dynamic_<%=cid %>.addColumnValue(ParserUtils.parseTo_Date(String.valueOf(valueObj_<%=cid%>), dynamicMetadata_<%=cid%>.getFormat()));
										}else if("id_Double".equals(dynamicMetadata_<%=cid%>.getType())){
											dynamic_<%=cid %>.addColumnValue(ParserUtils.parseTo_Double(String.valueOf(valueObj_<%=cid%>)));
										}else if("id_Integer".equals(dynamicMetadata_<%=cid%>.getType())){
											dynamic_<%=cid %>.addColumnValue(ParserUtils.parseTo_Integer(String.valueOf(valueObj_<%=cid%>)));
										}else if("id_Boolean".equals(dynamicMetadata_<%=cid%>.getType())){
											dynamic_<%=cid %>.addColumnValue(ParserUtils.parseTo_Boolean(String.valueOf(valueObj_<%=cid%>)));
										}else{
											dynamic_<%=cid %>.addColumnValue(valueObj_<%=cid%>);
										}
									}else{
										dynamic_<%=cid %>.addColumnValue(null);
									}
								}
								<%=outgoingConn.getName() %>.<%=dynamicColName%> = dynamic_<%=cid %>;
						    <%
						    }
						    %>

							nb_line_<%=cid%>++;
							Object valueObj_<%=cid%> = null;
				<%
				}else{
				%>
					sforceBulk_<%=cid%>.doBulkQuery(<%=sObject%>, sql_<%=cid%>.toString(), 30);
					String[] queryResultIDs_<%=cid%> = sforceBulk_<%=cid%>.getQueryResultIDs();
					for(String queryResultId_<%=cid%> : queryResultIDs_<%=cid%>){
						org.talend.salesforceBulk.ResultSet resultSet_<%=cid%> = sforceBulk_<%=cid%>.getQueryResultSet(queryResultId_<%=cid%>);
						java.util.Map<String,String> resultMessage_<%=cid%> = null;
						while((resultMessage_<%=cid%> = resultSet_<%=cid%>.next())!=null){
							nb_line_<%=cid%>++;
							String value_<%=cid%> = null;
				<%
				}
							for( int i = 0; i < columnList.size(); i++) {

								IMetadataColumn column = columnList.get(i);

								if(column.getTalendType().equals("id_Dynamic")){
									continue;
								}

								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());

								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());

								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();

								if("soap".equals(api)){%>
									//get the real value according the columnName
									valueObj_<%=cid%> = topRecord_<%=cid%>.getValue("<%=columnList.get(i).getLabel()%>");
    								if(valueObj_<%=cid%> != null){
    								 	String value_<%=cid%> = (String) valueObj_<%=cid%>;
								<%}else{%>
									value_<%=cid%> = resultMessage_<%=cid%>.get("<%=columnList.get(i).getLabel()%>");
									if(value_<%=cid%> != null && !"".equals(value_<%=cid%>)){
								<%}%>
    									<%
    									if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
    									%>
    										<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = value_<%=cid%>;
    									<%
    									} else if(javaType == JavaTypesManager.DATE) { // Date
    									%>
    										<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_Date(value_<%=cid%>, <%= patternValue %>);
    									<%
    									} else if(javaType == JavaTypesManager.BYTE_ARRAY) { // byte[]
    									%>
    										<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = value_<%=cid%>.getBytes();
    									<%
    									} else  { // other
    									%>
    										<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(value_<%=cid%>);
    									<%
    									}
    									%>
    								} else {
    									<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
    								}
							<%
							}
							log.debug(log.str("Retrieving the record "), log.var("nb_line"), log.str("."));
			}// end 1
		}
	}
}
%>
