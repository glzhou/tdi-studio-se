<%@ jet
imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.IMetadataTable
        java.util.List
        "
%>
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
    <%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    log = new LogUtil(node);

    String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");

    String username = ElementParameterParser.getValue(node, "__USER__");

    String action = ElementParameterParser.getValue(node, "__ACTION__");
    String commitLevel = ElementParameterParser.getValue(node, "__COMMIT_LEVEL__");
    boolean extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
    String logFile = ElementParameterParser.getValue(node, "__LOGFILENAME__").trim();
    boolean ceaseForError = ("true").equals(ElementParameterParser.getValue(node, "__CEASE_FOR_ERROR__"));
    boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));
    boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
    String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");
	boolean isUseSaveSession = "true".equals(ElementParameterParser.getValue(node,"__USE_SAVE_SESSION__"));
	String sessionDir = ElementParameterParser.getValue(node,"__SESSION_DIRECTORY__");
    boolean useHttpChunked = "true".equals(ElementParameterParser.getValue(node,"__USE_HTTP_CHUNKED__"));
    // if the extended insert is disabled set the commit level to 1
    if (!extendedInsert) commitLevel = "1";

    String passwordFieldName = "";

    boolean bulkConnection = false; //for tSalesforceOAuth.javajet

    String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
    String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
    boolean useOAuth = "OAUTH".equals(loginType);

    String upsertkey = ElementParameterParser.getValue(node, "__UPSERT_KEY_COLUMN__");
    boolean ignoreNullValue = ("true").equals(ElementParameterParser.getValue(node, "__IGNORE_NULL__"));
    %>
    int nb_line_<%=cid %> = 0;
    int nb_success_<%=cid%> = 0;
    int nb_reject_<%=cid%> = 0;
    System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
    org.talend.salesforce.SforceConnection sforceConn_<%=cid%> = null;
    <%
    if(useExistingConn){
    %>
        if(globalMap.get("conn_<%=connection%>") == null){
            throw new RuntimeException("Get null connection from <%=connection%>");
        }
        <%log.info(log.str("Use exist connection : " + connection + "."));%>
        sforceConn_<%=cid%> = (org.talend.salesforce.SforceConnection)globalMap.get("conn_<%=connection%>");
    <%
    }else{
        if(useOAuth){
            String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
            String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
            %>
            <%
            passwordFieldName = "__OAUTH_CLIENT_SECRET__";
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
            %>
                String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%
            } else {
            %>
                String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
            <%
            }
            String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");

            String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
            String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
            %>
            sforceConn_<%=cid%> =
                new org.talend.salesforce.SforceOAuthConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
                    <%
                    if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
                    %>
                        .setTokenFilePath(<%=tokenFile%>)
                    <%
                    }
                    %>
                    .setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                    <%
                    if(clientID != null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                    %>
                        .setClientID(<%=clientID%>)
                    <%
                    }
                    %>
                    .useHttpChunked(<%= useHttpChunked %>)
                    .build();
        <%
        }else{
        %>

            <%
            passwordFieldName = "__PASS__";
            %>

            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

            sforceConn_<%=cid%> =
                new org.talend.salesforce.SforceBasicConnection.Builder(<%=endpoint%>, <%=username%>, decryptedPassword_<%=cid%>)
                    .setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                    <%
	            	if(isUseSaveSession){
					%>
						.setSessionFilePath(<%=sessionDir%>)
					<%
					}
                    if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                    %>
                        .setClientID(<%=clientID%>)
                    <%
                    }
                    %>
                    .useHttpChunked(<%= useHttpChunked %>)
                    .build();
        <%
        }
        log.info(log.str("Login successful."));
    }
    %>
    org.talend.salesforce.SforceManagement sforceManagement_<%=cid%> = new org.talend.salesforce.SforceManagementImpl(sforceConn_<%=cid%>, <%=commitLevel%>, <%=ceaseForError%>, <%=logFile%>);
    <%if("upsert".equals(action)){%>
        org.apache.axiom.om.OMFactory fac_<%=cid%> = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
    <%}%>
    <%
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {//A1
        IMetadataTable metadata = metadatas.get(0);
        boolean hasDynamic = metadata.isDynamicSchema();
        if(hasDynamic){
        %>
            class SFDynamicUtils_<%=cid%>{
                org.apache.axiom.om.OMFactory omeFactory = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
                public void extractDynamicColumn(routines.system.Dynamic dynamic,java.util.List<org.apache.axiom.om.OMElement> list, java.util.List<String> nullList) throws Exception{
                    for(int i=0;i<dynamic.getColumnCount();i++){
                        routines.system.DynamicMetadata dynamicMetadata = dynamic.getColumnMetadata(i);
                        String talendType = dynamicMetadata.getType();
                        String fieldName = dynamicMetadata.getName();
                        Object fieldValue = dynamic.getColumnValue(fieldName);
                        <%
                        if("upsert".equals(action)) {
                        %>
                            if(dynamicMetadata.getRefFieldName()!=null && dynamicMetadata.getRefModuleName()!=null){
                                org.apache.axiom.om.OMElement reference = omeFactory.createOMElement(dynamicMetadata.getRefFieldName(), null);
                                reference.addChild(org.talend.salesforce.SforceManagementUtil.newOMElement("type",dynamicMetadata.getRefModuleName()));
                                if ("id_Date".equals(talendType)) {
                                    if(fieldValue != null){
                                        reference.addChild(org.talend.salesforce.SforceManagementUtil.newOMElement(fieldName,FormatterUtils.format_Date((java.util.Date)(fieldValue), dynamicMetadata.getFormat()) ));
                                        list.add(reference);
                                    }
                                    continue;
                                } else if(fieldValue != null && !"".equals(String.valueOf(fieldValue))) {
                                    reference.addChild(org.talend.salesforce.SforceManagementUtil.newOMElement(fieldName,String.valueOf(fieldValue) ));
                                    list.add(reference);
                                    continue;
                                }
                            }
                            <%
                            if("Id".equals(upsertkey)){
                            %>
                                if("Id".equals(fieldName)){
                                    continue;
                                }
                            <%
                            }
                            %>
                            if ("id_Date".equals(talendType)) {
                                if(fieldValue != null){
                                    list.add(org.talend.salesforce.SforceManagementUtil.newOMElement(fieldName,FormatterUtils.format_Date((java.util.Date)(fieldValue), dynamicMetadata.getFormat()) ));
                                }
                            } else if(fieldValue != null && !"".equals(String.valueOf(fieldValue))) {
                                list.add(org.talend.salesforce.SforceManagementUtil.newOMElement(fieldName,String.valueOf(fieldValue) ));
                            }
                        <%
                        }else{
                        %>
                            if("Id".equals(fieldName)){
                                continue;
                            }
                            if ("id_Date".equals(talendType)) {
                                if(fieldValue != null){
                                    list.add(org.talend.salesforce.SforceManagementUtil.newOMElement(fieldName,FormatterUtils.format_Date((java.util.Date)(fieldValue), dynamicMetadata.getFormat()) ));
                                }
                            } else if(fieldValue != null && !"".equals(String.valueOf(fieldValue))) {
                                list.add(org.talend.salesforce.SforceManagementUtil.newOMElement(fieldName,String.valueOf(fieldValue) ));
                            }
                            <%
                            if(!ignoreNullValue){
                            %>
                                if(fieldValue == null || "".equals(String.valueOf(fieldValue))){
                                    nullList.add(fieldName);
                                }
                            <%
                            }
                            %>
                        <%
                        }
                        %>
                    }
                }

            }
            SFDynamicUtils_<%=cid%> sfDynamicUtils_<%=cid%> =new SFDynamicUtils_<%=cid%>();
        <%
        }
    }
    %>
