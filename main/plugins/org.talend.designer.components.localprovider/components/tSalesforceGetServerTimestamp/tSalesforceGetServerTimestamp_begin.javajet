<%@ jet
imports="
    	org.talend.core.model.process.INode
    	org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		java.util.List
		"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	log = new LogUtil(node);

	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
   	boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));
    boolean useHttpChunked = "true".equals(ElementParameterParser.getValue(node,"__USE_HTTP_CHUNKED__"));

	String cid = node.getUniqueName();

   	String passwordFieldName = "";
%>

int nb_line_<%=cid%> = 0;

<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);

	if (metadata != null) {
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		if (outgoingConns != null && outgoingConns.size() > 0){
			String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
			String username = ElementParameterParser.getValue(node, "__USER__");

			String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
			boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
			String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
			String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");
			boolean isUseSaveSession = "true".equals(ElementParameterParser.getValue(node,"__USE_SAVE_SESSION__"));
			String sessionDir = ElementParameterParser.getValue(node,"__SESSION_DIRECTORY__");

			boolean bulkConnection = false; //for tSalesforceOAuth.javajet

			String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
			String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
			boolean useOAuth = "OAUTH".equals(loginType);
			%>
        	System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
			org.talend.salesforce.SforceConnection sforceConn_<%=cid%> = null;
			<%if(useExistingConn){%>
				if(globalMap.get("conn_<%=connection%>") == null){
					throw new RuntimeException("Get null connection from <%=connection%>");
				}
				<%log.info(log.str("Use exist connection : " + connection + "."));%>
				sforceConn_<%=cid%> = (org.talend.salesforce.SforceConnection)globalMap.get("conn_<%=connection%>");
			<%}else{
				if(useOAuth){
					String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
            		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
            		%>
            		<%
                	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
                	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                	%>
                		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                	<%
                	} else {
                	%>
                		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                	<%
                	}
                	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");

            		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
            		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
					%>
					sforceConn_<%=cid%> =
						new org.talend.salesforce.SforceOAuthConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
            				<%
            				if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
            				%>
                				.setTokenFilePath(<%=tokenFile%>)
            				<%
            				}
            				%>
            				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                        	<%
                        	if(clientID != null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                        	%>
                    		.setClientID(<%=clientID%>)
                        	<%
                        	}
                        	%>
                            .useHttpChunked(<%= useHttpChunked %>)
                        	.build();
				<%
				}else{
					if(useProxy){
						passwordFieldName = "__PROXY_PASSWORD__";
        				if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
                		%>
                		String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                		<%
                		} else {
                		%>
                		String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
                		<%
                		}
						%>
					    java.util.Properties props_<%=cid%> = System.getProperties();
					    props_<%=cid%>.put("socksProxyHost",<%=proxyHost %>);
					    props_<%=cid%>.put("socksProxyPort",<%=proxyPort %>);
					    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername %>);
					    props_<%=cid%>.put("java.net.socks.password", decryptedPwd_<%=cid%>);
					<%
					}
					%>

					<%
        			passwordFieldName = "__PASS__";
        			%>

        			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

					sforceConn_<%=cid%> =
            			new org.talend.salesforce.SforceBasicConnection.Builder(<%=endpoint%>, <%=username%>, decryptedPassword_<%=cid%>)
            				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                        	<%
			            	if(isUseSaveSession){
							%>
								.setSessionFilePath(<%=sessionDir%>)
							<%
							}
                        	if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                        	%>
                        		.setClientID(<%=clientID%>)
                        	<%
                        	}
                        	%>
                            .useHttpChunked(<%= useHttpChunked %>)
                        	.build();
				<%
				}
				log.info(log.str("Login successful."));
			}
			%>
			org.talend.salesforce.SforceManagement sfMgr_<%=cid%> = new org.talend.salesforce.SforceManagementImpl(sforceConn_<%=cid%>);
		<%
		}
	}
}
%>
