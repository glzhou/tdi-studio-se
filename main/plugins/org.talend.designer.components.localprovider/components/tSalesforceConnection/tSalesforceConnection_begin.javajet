<%@ jet
imports="
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.utils.TalendTextUtils
		"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
log = new LogUtil(node);

String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
String username = ElementParameterParser.getValue(node, "__USER__");

String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));
boolean useHttpChunked = "true".equals(ElementParameterParser.getValue(node,"__USE_HTTP_CHUNKED__"));
boolean httpTraceMessage = ("true").equals(ElementParameterParser.getValue(node,"__HTTP_TRACEMESSAGE__"));

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");

boolean bulkConnection = ("true").equals(ElementParameterParser.getValue(node,"__BULK_CONNECTION__"));
String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");

boolean isUseSaveSession = "true".equals(ElementParameterParser.getValue(node,"__USE_SAVE_SESSION__"));
String sessionDir = ElementParameterParser.getValue(node,"__SESSION_DIRECTORY__");
%>
System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
<%
String passwordFieldName = "";

String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
boolean useOAuth = "OAUTH".equals(loginType);
if(bulkConnection){//TODO: ==> need to investigate set http chunked for bulk connection.
%>
	<%
	if(useOAuth){
		String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
    	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
    	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
    	%>
    		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
    	<%
    	} else {
    	%>
    		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
    	<%
    	}
    	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
		%>
    	org.talend.salesforceBulk.SforceBulkConnection sforceConn_<%=cid%>
    		= new org.talend.salesforceBulk.SforceOAuthBulkConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
    			<%
    			if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
    			%>
    				.setTokenFilePath(<%=tokenFile%>)
    			<%
    			}
    			%>
    			.needCompression(<%=needCompression%>).needTraceMessage(<%=httpTraceMessage%>)
    			.build();
	<%
	}else{
		passwordFieldName = "__PASS__";
		%>

		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		<%
		if(useProxy){
			passwordFieldName = "__PROXY_PASSWORD__";

			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
    		%>
    			String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
    		<%
    		} else {
    		%>
    			String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
    		<%
    		}
			%>
		<%
		}
		%>
		org.talend.salesforceBulk.SforceBulkConnection sforceConn_<%=cid%>
			= new org.talend.salesforceBulk.SforceBasicBulkConnection.Builder(<%=endpoint%>,<%=username%>,decryptedPassword_<%=cid%>,<%=apiVersion%>)
				.needCompression(<%=needCompression%>).needTraceMessage(<%=httpTraceMessage%>)
				<%
				if(useProxy){
        		%>
        			.setProxy(true,<%=proxyHost%>,<%=TalendTextUtils.removeQuotes(proxyPort)%>,<%=proxyUsername%>,decryptedPwd_<%=cid%>)
        		<%
        		}
				%>
				.build();
	<%
	}
	%>

<%
}else{
%>
	<%
	if(useOAuth){
		String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
    	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
    	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
    	%>
    		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
    	<%
    	} else {
    	%>
    		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
    	<%
    	}
    	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
    	%>
		org.talend.salesforce.SforceConnection sforceConn_<%=cid%>
			= new org.talend.salesforce.SforceOAuthConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
				<%
				if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
				%>
    				.setTokenFilePath(<%=tokenFile%>)
				<%
				}
				%>
				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
            	<%
            	if(clientID != null && !"".equals(clientID) && !"\"\"".equals(clientID)){
            	%>
            		.setClientID(<%=clientID%>)
            	<%
            	}
            	%>
                .useHttpChunked(<%= useHttpChunked %>)
            	.build();
	<%
	}else{
		if(useProxy){
			passwordFieldName = "__PROXY_PASSWORD__";

			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
    		%>
    			String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
    		<%
    		} else {
    		%>
    			String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
    		<%
    		}
			%>
		    java.util.Properties props_<%=cid%> = System.getProperties();
		    props_<%=cid%>.put("socksProxyHost",<%=proxyHost%>);
		    props_<%=cid%>.put("socksProxyPort",<%=proxyPort%>);
		    props_<%=cid%>.put("java.net.socks.username", <%=proxyUsername%>);
		    props_<%=cid%>.put("java.net.socks.password", decryptedPwd_<%=cid%>);
		<%
		}
		%>

		<%
		passwordFieldName = "__PASS__";
		%>

		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		org.talend.salesforce.SforceConnection sforceConn_<%=cid%>
			= new org.talend.salesforce.SforceBasicConnection.Builder(<%=endpoint%>, <%=username%>, decryptedPassword_<%=cid%>)
				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
            	<%
            	if(isUseSaveSession){
				%>
					.setSessionFilePath(<%=sessionDir%>)
				<%
				}
            	if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){
            	%>
            		.setClientID(<%=clientID%>)
            	<%
            	}
            	%>
                .useHttpChunked(<%= useHttpChunked %>)
            	.build();
	<%
	}
	%>
<%
}
%>
<%log.info(log.str("Login successful."));%>
globalMap.put("conn_<%=cid%>", sforceConn_<%=cid%>);

